# -*- coding: utf-8 -*-
"""PySpark_Test.ipynb.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zAR5Nhbd-vJrATS_X4Bx9--z6IJTvq2p
"""

pip install pyspark

from google.colab import files
from pyspark.sql import SparkSession
from pyspark.sql.functions import lit, concat_ws
from pyspark.ml.feature import Imputer

"""To easily upload files to Google Colab."""

files.upload()

"""To create a new spark session or to invoke an existing one."""

test_session = SparkSession.builder.appName('Spark Session').getOrCreate()

"""To read a CSV file with its first row as header and its variable datatypes retained."""

first_dataframe = test_session.read.csv("test1.csv", header = True, inferSchema= True)

"""To print or display the schema of the data file."""

first_dataframe.printSchema()

"""To print or display the data frame."""

first_dataframe.show()

"""To display columns."""

first_dataframe.columns

"""To print or display column elements."""

first_dataframe.select('Name').show()

"""To select and display multiple columns."""

first_dataframe.select(['Name','Experience']).show()

"""To display or print data types, and quantitative summary for all the columns of a data frame."""

first_dataframe.dtypes

first_dataframe.describe().show()

"""To add and drop a column to and from a dataframe respectively."""

first_dataframe = first_dataframe.withColumn("Gender",lit(None))

first_dataframe.show()

first_dataframe = first_dataframe.drop('Gender')

first_dataframe.show()

"""To change the name of a column."""

first_dataframe = first_dataframe.withColumnRenamed("Name","Full_Name")
first_dataframe.show()

second_dataframe = test_session.read.csv("test2.csv", header = True, inferSchema = True)

second_dataframe.show()

type(second_dataframe)

"""Handling null values."""

second_dataframe.na.drop(how='any', thresh = 3).show()

to_impute = Imputer(inputCols = ['age','Experience','Salary'], outputCols = ["Imputed_{}".format(x) for x in ['age','Experience','Salary']]).setStrategy("mean")

second_dataframe = to_impute.fit(second_dataframe).transform(second_dataframe)

display(second_dataframe)

"""Filter Operations."""

second_dataframe.filter(~(second_dataframe['Imputed_Experience'] <= 5) & (second_dataframe['Imputed_Salary'] > 15000 )).select(['Name','Imputed_age','Imputed_Experience','Imputed_Salary']).show()

third_dataframe = test_session.read.option('header','true').csv("test3.csv",inferSchema = True)

third_dataframe.show()

third_dataframe.groupBy('Name').count().show()

third_dataframe.agg({'Salary':'median'}).show()















